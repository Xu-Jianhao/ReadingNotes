鸟哥的LINUX私房菜读书笔记

一、linux

二、主机规划与磁盘分区

三、安装Centos7

四、首次登入

五、Linux的文件权限与目录配置
        1、更改文件的群组   -   chgrp
        2、更改文件的拥有者 -   chown
        3、修改文件权限     -   chmod
                数字法:     r - 4   w - 2   x - 1

六、Linux文件与目录管理
        1、touch的目的在于修改文件的时间参数，亦可用来创建空文件
                将目标文件的日期修订为目前时间（mtime与atime）
        2、一个文件记录的时间参数有三种,ls默认显示的是mtime
                access time(atime)      -   最后的访问时间                  ls -lu
                status time(ctime)      -   状态修改时间（文件的属性，权限）ls -lc
                modification time(mtime)-   最后内容修改时间                ls -l
        3、除了传统的rwx权限之外，在Ext2/Ext3/Ext4/xfs文件系统中，还可以使用chattr与lsattr设定和观察文件的隐藏属性。
                        常见的  +a  只能新增数据
                                +i  完全不能改动
七、Linux磁盘与文件系统管理

八、文件与文件系统的压缩、打包与备份

九、VIM

十、认识与学习BASH
        1、 字符转换命令    -   tr\col\join\paste\expand
            1\  tr  -   用来删除一段讯息当中的文字,或者是进行文字讯息的替换
                tr [-ds] SET1 ...
                选项与参数:
                    -d  -   删除讯息当中的SET1这个字符串
                    -s  -   取代掉重复的字符

                例:
                    last | tr '[a-z]' '[A-Z]'       -   将last输出的信息中所有的小写变成大写
                    cat /etc/passwd | tr -d ':'     -   将输出的/etc/passwd 中的':'删除
            2\  col -   将tab按键转化为空格
                col [-xb]
                选项与参数:
                    -x  :   将tab键转换成对等的空格键
                例:
                    cat /etc/man_db.conf | col -x | cat -A | more   -   将tab转空格(cat -A 显示所有特殊按键)
            3\  join    -   合并文件相关数据
                join [-tit12] file1 file2
                选项与参数:
                    -t  -   join默认以空格符分隔数据,并且比对[第一个字段]的数据,如果两个文件相同,则将两笔数据联成一行,且第一个字段放在第一个
                    -i  -   忽略大小写差异
                    -1  -   数字1,代表[第一个文件要用哪个字段来分析]
                    -2  -   代表[第二个文件要用哪个字段来分析]
                例:
                    join -t ':' /etc/passwd /etc/shadow | head -n 3     -   将/etc/passwd与/etc/shadow相关数据整合成一栏
            4\  paste   -   将两个文件的两行合并成一行,且中间以[tab]隔开
                paste [-d] file1 file2
                选项与参数:
                    -d  -   后面可以指定分隔符,预设是以[tab]来分隔的
                    -   -   如果后面file部分写成-,表示来自standard input(STDIN)的资料的意思
                例:
                    paste /etc/passwd /etc/shadow   -   将两个文件的同一行合并

            5\  expand  -   将[tab]转化为空格
                expand [-t] file
                选项与参数:
                    -t  -   指定数字,默认一个[tab]转化为8个空格,-t可以指定转化为多少个空格
        
        2、 split   -   分区命令(将大文件分割成小文件)
            split [-bl] file PREFIX
            选项与参数:
                -b  -   指定想要分割成的文件大小,可加单位,例如b,k,m等
                -l  -   以行数来进行分割
                PREFIX  -   文件名前缀,分割成小文件的文件名前缀

        3、 xargs   -   参数代换
            xargs [-0epn] command
            选项与参数:
                -0  -   如果输入的stdin含有特殊字符,例如`,\.空格键等等字符时,-0参数可以将它还原成一般字符
                -e  -   这个是EOF的意思,指定一个字符串,当xargs分析到这个字符时,就停止工作
                -p  -   在执行每个指令的argument时,都会询问使用者的意思
                -n  -   指定数字,每次command指令执行时,要使用几个参数的意思
                当xargs后面没有指定任何指令时,默认是以echo来进行输出

            例:
                cut -d ':' -f 1 /etc/passwd | head -n 3 | xargs -n 1 id -   使用id来打印passwd文件每个用户id
                find /usr/sbin -perm /7000 | xargs ls -l    -   ls 查看每个find找到的目录

十一、正则表达式与文件格式化处理

十二、学习Shell scripts

十三、Linux账号管理与ACL权限设定

十四、磁盘配额(Quota)与进阶文件系统管理

十五、例行性工作排程(crontab)
        1、仅执行一次的工作排程
                服务atd :
                    systemctl restart atd
                    systemctl enable atd    -   设置为开机启动
                    指令:   at now + 5 minutes  -   at [time]
                    执行at后，任务信息会在/var/spool/at生成
                at的使用限制:
                        /etc/at.allow   写在此文件中的使用者才能使用at
                        /etc/at.deny    如果/etc/at.allow不存在，就寻找这个文件，写在此文件中的用户不能使用at

        2、循环执行的工作排程
                服务crond
                    crontab使用限制(两个文件保留一个):
                        /etc/cron.allow 写在此文件中的用户才可以使用crontab     (优先级高)
                        /etc/cron.deny  写在此文件中的用户不可以使用crontab
                    当用户使用crontab建立工作后,该项工作就会被记录到/var/spool/cron/中,以用户名建立文件
                    cron执行的每一项工作都会被记录在/var/log/cron

                使用:
                    crontab -e  :   编辑crontab的工作内容
                            -r  :   删除当前用户所有工作内容
                            -l  :   显示当前用户所有工作内容

                系统的配置文件
                        /etc/crontab    此文件存放系统的例行性任务(修改完后最好重启服务,以便数据可以被读取到内存)
                        /etc/cron.d/*   此目录下的文件都会被crontab所执行，当开发新软件时可以在此目录下单纯创建一个配置文件


十六、进程管理与SELinux初探
        1、脱机工作
                nohup [指令与参数]      在终端机前景工作
                nohub [指令与参数] &    在终端机背景工作,且不受账户注销影响
                nohub 不支持bash内建命令
        2、进程观察命令
                pstree  -   进程关系以树状图形式展示
                ps aux  -   观察系统所有的进程数据
                ps -1A  -   观察所有
                ps axjf -   连同部分进程树状态
                ps -l   -   查看自己bash相关的进程
                    ps选项与参数:
                        -A  -   所有的process均显示出来，与-e具有同样的效果
                        -a  -   不与terminal有关的所有process
                        -u  -   有效使用者相关的process
                        x   -   通常与a这个参数一起使用，可列出较完整信息
                输出格式规划:
                        l   -   较长、较详细的将该PID的信息列出
                        j   -   工作的格式
                        -f  -   做一个更为完整的输出

                ps -l 展示信息详解
                        F S   UID    PID   PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
                        4 S  1000  11679  11678  0  80   0 - 29086 do_wai pts/0    00:00:00 bash
                        0 T  1000  13446  11679  0  80   0 - 37903 do_sig pts/0    00:00:00 vim

                        F : 代表这个进程旗标(process flags),说明这个进程的总结权限,常见的号码：
                          4   -   表示此进程的权限为root
                          1   -   表示此子进程仅进行fork而没有实际执行(exec)

                        S : 代表这个进程的状态，主要状态有:
                                R(Running)  -   该程序正在运行中
                                S(Sleep)    -   该程序正在睡眠状态,但是可以被唤醒
                                D           -   不可被唤醒的睡眠状态,通常这至程序可能在等待I\O
                                T(Stop)     -   停止状态,可能是在工作控制或除错状态
                                Z(Zombie)   -   僵尸状态,进程已经终止但是却无法被移除至内存外

                        UID/PID/PPID    -   用户ID/进程ID/父亲进程ID

                        C               -   代表CPU使用率，单位为百分比

                        PRI/NI          -   Priority/Nice的缩写,代表此进程被CPU所执行的优先级,数值越小代表该进程越快被CPU执行

                        ADDR/SZ/WCHAN   -   都与内存有关
                                ADDR    是kernel function,指出该进程在内存的哪个部分,如果是个running的进程,一般就会显示[-]
                                SZ      代表此进程用掉多少内存
                                WCHAN   表示目前进程是否在运作中,若为 - 表示正在运作中

                        TTY     -   登入者的终端机位置,若为远程登录则使用动态终端接口(pts/n)

                        TIME    -   使用掉的CPU时间,是此进程实际花费CPU运作的时间,而不是系统时间

                        CMD     -   就是command 的缩写,造成此程序的触发程序之指令为何

                ps aux  详解
                        USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
                        root          1  0.0  0.3 193756  5956 ?        Ss   11:42   0:05 /usr/lib/syste
                        root          2  0.0  0.0      0     0 ?        S    11:42   0:00 [kthreadd]
                        root          3  0.0  0.0      0     0 ?        S    11:42   0:00 [ksoftirqd/0]

                        USER  -     该process属于哪个使用者账号
                        PID   -
                        %CPU  -     该process使用掉的CPU资源百分比
                        %MEN  -     该process所占用的物理内存百分比
                        VSZ   -     该process使用掉的虚拟内存量(Kbytes)
                        RSS   -     该process占用的固定的内存量(Kbytes)
                        TTY   -     是在哪个终端机上面运作的,若与终端机无关则显示?,另外tty1-tty6是在本机上登入者
                                                            若为pts/0等等,则表示为网络连接进主机的进程
                        STAT  -     该进程目前的状态
                        START -     该进程被触发启动的时间
                        TIME  -     该进程实际使用CPU运作的时间
                        COMMAND -   该进程的实际指令

        3、top  -   动态观察进程的变化
                选项与参数:
                        -d  -   后面可以接秒数,就是整个进程画面更新的秒数.默认是5秒
                        -b  -   以批次的方式执行top,通常会搭配数据流重导向来将批次的结果输出成为文件
                        -n  -   与-b搭配,意义是需要进行几次top的输出结果
                        -p  -   指定PID来进行观察

                在top执行过程中可以使用的按键指令:
                        ?   -   显示在top当中可以输入的按键指令
                        P   -   以CPU的使用资源排序来显示
                        M   -   以内存的使用资源拍戏来显示
                        N   -   以PID来排序
                        T   -   以进程使用的CPU时间累积来排序显示
                        k   -   给予某个PID一个信号(signal)
                        r   -   给予某个PID重新制定一个nice值

        4、进程的管理   -   kill、killall
                kill    -   发送一个信号给指定的进程
                killall -   可以发送一个信号给一组服务
                    选项与参数:
                        -i  -   interactive的意思,交互式的,若需要删除时,会出现提示字符给用户
                        -e  -   exact的意思,表示后面接的command name要一致,整个指令不能超过15字符
                        -I  -   指令名称,忽略大小写

                例: 
                    killall -9 httpd    -   终止所有以httpd启动的进程

        5、进程的执行顺序(优先级)
                PRI(priority)和NI(nice) (进程优先级是会被子进程继承的)
                PRI 值越低代表越优先执行,不过PRI的值是由核心动态调整的,用户无法直接调整PRI
                想要调整进程的优先顺序,要通过NI值
                PRI(new) = PRI(old)+nice

                注意:
                    nice 值可调整的范围是 -20~19
                    root 可随意调整自己或他人进程的nice值,范围-20~19
                    一般使用者仅可以调整自己进程的nice值,且范围为0~19,避免一般用户抢占CPU

                    nice值调整方式:
                        1\  一开始执行程序就给予一个特定的nice值,用nice指令
                            nice [-n nice值] command
                        2\  调整某个已经存在的PID的nice值,用renice指令
                            renice [nice值] PID

        6、系统资源的观察
                1\  free    -   内存的使用情况
                    选项与参数:
                        -b  -   直接输入free时,显示的单位是Kbytes,我们可以使用b(bytes),m(Mbytes),k(Kbytes),及g(Gbytes)
                        -t  -   在输出的最终结果,显示物理内存与swap的总量
                        -s  -   可以让系统每几秒输出一次,不间断的一直输出
                        -c  -   与-s同事处理,让free列出几次的意思

                2\  uname   -   查阅系统与核心相关信息
                    选项与参数:
                        -a  -   所以系统相关的信息,包括底下的数据都会被列出来
                        -s  -   系统核心名称
                        -r  -   核心的版本
                        -m  -   本系统的硬件名称,例如i686或x86_64等
                        -p  -   CPU的类型,与-m类似,只是显示的是CPU的类型
                        -i  -   硬件的平台

                3\  uptime  -   系统启动时间与工作负载
                     显示目前系统已经开机多久,以及1,5,15分钟的平均负载

                4\ netstat  -   追踪网络或插槽文件
                    选项与参数:
                        -a  -   将目前系统上所有的联机、监听、Socket数据都列出来
                        -t  -   列出tcp网络封包的数据
                        -u  -   列出udp网络封包的数据
                        -n  -   以端口号来显示
                        -l  -   列出目前正在网络监听的服务
                        -p  -   列出该网络服务的进程PID

                5\  dmesg   -   分析核心产生的讯息
                    将系统核心在运行过程中的信息打印出来,主要是查看一些硬件信息

                6\  vmstat  -   侦测系统资源的变化
                    主要侦测 CPU/内存/磁盘输入输出状态
                    选项与参数:
                        vmstat [-a] [延迟[总计侦测次数]]    -   CPU/内存等信息
                        vmstat [-fs]                        -   内存相关
                        vmstat [-S 单位]                    -   设定显示数据的单位
                        vmstat [-d]                         -   与磁盘相关
                        vmstat [-p 分区槽]                  -   与磁盘有关

                            -a  -   使用inactive/active(活跃与否)取代buffer/cache的内存输出信息
                            -f  -   开机到目前为止,系统复制(fork)的进程数
                            -s  -   将一些时间(开机到目前为止)导致的内存变化情况列表说明
                            -S  -   后面可以接单位,让显示的数据有单位.例如K/M取代bytes的容量
                            -d  -   列出磁盘的读写总量统计表
                            -p  -   后面列出分区槽,可显示该分区槽的读写总量统计表

                        信息详解(vmstat 5):
                                procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
                                r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
                                1  0      8  96992      0 901260    0    0   121     5   72   81  0  0 99  0  0
                                0  0      8  97000      0 901260    0    0     0     0  114  115  0  0 100  0  0

                                procs字段:
                                        r       -       等待运作的进程数量
                                        b       -       不可被唤醒的进程数量
                                                这两个项目越多,代表系统越忙碌
                                memory字段:
                                        swpd    -       虚拟内存被使用的容量
                                        free    -       未被使用的内存容量
                                        buff    -       用于缓冲存储器
                                        cache   -       用于高速缓存
                                swap字段(内存置换空间):
                                        si      -       由磁盘中将进程取出的量
                                        so      -       由于内存不足而将没用到的进程写入到磁盘的swap的容量
                                                如果si/so的数值太大,表示内存内的数据常常得在磁盘与主存储器之间传来传去,系统效能会很差
                                io字段(磁盘读写):
                                        bi      -       由磁盘读入的区块数量
                                        bo      -       写入到磁盘去的区块数量
                                                如果这部分的值越高,代表系统的I/O非常忙碌
                                system字段(系统):
                                        in      -       每秒被中断的进程次数
                                        cs      -       每秒钟进行的事件切换次数
                                                这两个数值越大,代表系统与接口设备的沟通非常频繁,接口设备包括磁盘、网卡、时钟等.
                                cpu字段:
                                        us      -       非核心层的CPU使用状态
                                        sy      -       核心层所使用的CPU状态
                                        id      -       闲置的状态
                                        wa      -       等待I/O所耗费的CPU状态
                                        st      -       被虚拟机所盗用的cpu使用状态

        7、 /proc/*     -   内存数据
                /proc目录下文件详解:
                    /proc/cmdline       -   加载kernel时所下达的相关指令与参数,查阅此文件,可了解指令是如何启动的
                    /proc/cpuinfo       -   本机的CPU的相关信息,包括频率、类型和运算功能
                    /proc/devices       -   这个文件记录了系统各个主要装置的主要装置代号,与mknod有关
                    /proc/filesystem    -   目前系统已经加载的文件系统
                    /proc/interrupts    -   目前系统上面的IRQ分配状态
                    /proc/ioports       -   目前系统上面各个装置所配置的I/O地址
                    /proc/kcore         -   这个是内存大小,不要读它
                    /proc/loadavg       -   top,uptime      第一行的5,10,15分钟CPU平均负载记录在此
                    /proc/meminfo       -   使用free列出的内存信息,在这里也能查到
                    /proc/modules       -   目前系统已经加载的模块,可以理解为驱动程序
                    /proc/mounts        -   系统已经挂在的数据,就是用mount这个指令呼叫出来的数据
                    /proc/swaps         -   系统挂加载的内存,用掉的partiton就记录在此文件
                    /proc/partitions    -   使用fdisk -l会出现目前所有的partition在此记录
                    /proc/uptime        -   就是指令uptime的记录信息
                    /proc/version       -   核心的版本
                    /proc/bus/*         -   一些总线的装置,还有USB装置记录也在此

        8、 文件和进程
                1\ fuser    -   由文件找出正在使用该文件的进程
                   fuser [-umv] [-k [i] [-signal]] file/dir
                   选项与参数:
                       -u  -    除了进程的PID之外,同时列出该进程的拥有者
                       -m  -    后面接的那个文档名会主动的上提到该文件系统的最顶层,对umount不成功很有效
                       -v  -    可以列出每个文件与进程还有指令的完整相关性
                       -k  -    找出使用该文件/目录的PID,并试图把SIGKILL这个信号发送给该PID
                       -i  -    必须与-k配合,在删除PID之前会询问使用者的意愿
                       -signal - -1 -15 若不指定,默认是-9(SIGKILL)

                    例:
                       fuser -uv .  执行结果:
                                        用户     进程号 权限   命令
                       /home/xjh/Space/git/ReadingNotes:
                                        root       9491 ..c.. (root)bash
                                        root      13865 ..c.. (root)vim
                       权限字段(ACCESS):
                               c    -    此进程在当前目录下(非次目录)
                               e    -    可被触发为执行状态
                               f    -    是一个被开启的文件
                               r    -    代表顶层目录(root directory)
                               F    -    该文件被开启了,不过在等待回应中
                               m    -    可能为分享的动态函式库

                2\ lsof     -    列出被进程所开启的文件档名
                   lsof [-aUu] [+d]
                   选项与参数:
                        -a  -    多项数据需要[同时成立]才显示结果
                        -U  -    仅列出Unix like系统的socket文件类型
                        -u  -    后面接username,列出该使用者相关进程所开启的文件
                        +d  -    后面接目录,找出某个目录下已经被开启的文件
                    例:
                        lsof -u root -a -U          -   仅列出关于root的所有进程开启的socket文件
                        lsof +d /dev                -   列出目前系统上面所有的被启动的周边装置
                        lsof -u root | grep bash    -   列出属于root的bash这支程序所开启的文件

                3\  pidof   -   找出某支正在执行的程序的PID
                    pidof [-sx] program_name
                    选项与参数:
                        -s  -   仅列出一个PID 而不列出所有的PID
                        -x  -   同时列出该program name 可能的PPID 那个进程的PID

        9、 SELinux(Security Enhanced Linux)    -   安全强化的Linux

十七、认识系统服务(daemons)
    1、 System V版本(早期版本)
        需要靠init进程去唤起系统所有服务,系统第一支呼叫的程序是init
        inint机制特点:
            1\  服务的启动、关闭与观察方式(启动脚本基本放在/etc/init.d下)
                启动    -   /etc/init.d/daemon start
                关闭    -   /etc/init.d/daemon stop
                重启    -   /etc/init.d/daemon restart
                查看    -   /etc/init.d/daemon status
            2\  服务启动的分类
                独立启动模式    -   该服务直接常驻内存,反应速度快
                总管程序        -   由特殊的xinetd或inetd这两个总管程序提供socket对应或port对应的管理
                                    当没有用户需要时不会被启动,当有用户请求时,总管程序去唤醒对应的进程
                                    服务结束后,进程被结束。反应速度慢,需要等待唤醒过程
            3\  执行等级的分类
                init是开机后核心主动呼叫的,然后init根基用户自定义的执行等级来唤醒不同的服务,
                以进入不同的操作界面。基本上Linux提供7个执行等级,分别是0~6,
                比较重要的是:
                    1   -   单人维护模式
                    3   -   纯文本模式
                    5   -   文字加图形界面
                各个执行等级的启动脚本是通过/etc/rc.d/rc[0-6]/SXXdaemon链接到/etc/init.d/daemon
                链接文件(SXXdaemon)的功能为:S为启动该服务,XX是数字,为启动的顺序。
                由于有SXX的设定,因此在开机时可以[依次执行]所有需要的服务。
            4\  开机自启
                预设要开机自启的    -   chkconfig daemon on
                预设不要启动的      -   chkconfig daemon off
                查看开机自启项      -   chkconfig --list daemon
            5\  执行等级的切换行为
                当你要从纯文本界面(runlevel 3)切换到图形界面(runlevel 5)    -   init 5


    2、 systemd 使用的unit分类(自CentOS 7.x以后,Red Hat系列的distribution开始使用systemd管理机制)
        systemd 特点(优点):
            1\  平行处理所有服务,加速开机流程
            2\  一经要求就相应的on-demand启动方式
            3\  服务相关性的自我检查
                    (如果A服务是在B服务之上,当没有启动B服务的情况下启动A,systemd会帮忙启动B)
            4\  依据daemon功能分类
                首先systemd先定义所有的服务为一个服务单位(unit),并将该unit归类到不同的服务类型中,
                服务类型(type): service、socket、target、path、snapshot、timer
            5\  将多个daemons集合成为一个群组
                systemd将许多的功能集合成为一个target项目,执行某个target就是执行许多daemon

            注: 不是通过systemctl 命令启动的服务,systemd将无法侦测到该服务,无法统一管理

    3、 systemd 的配置文件放置目录
        /usr/lib/systemd/system/    -   每个服务最主要的启动脚本设定,类似/etc/init.d目录下
        /run/systemd/system/        -   系统执行过程中所产生的服务脚本,这些脚本的优先顺序要比/usr/lib/systemd/system/高
        /etc/systemd/system/        -   管理员依据主机系统的需求所建立的执行脚本,执行优先级高于/run/systemd/system/
    
    4、 通过systemctl 管理服务
        systemctl [command] [unit]
        command主要有:
            start       -   立刻启动服务
            stop        -   立刻关闭服务
            restart     -   立刻重启服务
            reload      -   不关闭服务的情况下,重新加载配置文件,让设定生效
            enable      -   设定下次开机时启动服务
            disable     -   关闭开机启动
            status      -   查看服务状态,会列出正在执行、开机预设、登录等信息
            is-active   -   目前有没有在运作中
            is-enable   -   开机时有没有预设启动
        例:
            systemctl status unit   -   查看状态
            执行结果第三行  -   Active: active (running) since 五 2020-05-15 09:48:46 CST; 7h ago 
                Active的几种状态:
                    active(running) -   正有一支或多支程序正在系统中执行
                    active(exited)  -   仅执行一次就正常结束的服务,目前并没有任何程序在系统中执行
                    active(waiting) -   正在执行当中,不过需要等待其他事件才能继续处理,阻塞等待状态
                    inactive        -   这个服务没有运行
            执行结果第二行  -   Loaded: loaded (/usr/lib/systemd/system/vsftpd.service; disabled; vendor preset: disabled)
                服务预设状态:
                    enable  -   这个服务将在开机时被执行(启动)
                    disable -   这个服务在开机时不会被启动
                    static  -   这个服务不可以自己启动(enable不可),可能会被其他的enable的服务来唤醒
                    mask    -   这个服务无论如何让都无法被启动,因为已经被强制注销(非删除),可通过systemctl unmask 方式改回原本状态
            systemctl mask unit -   强制注销,其实就是将服务的启动脚本链接文件链接到/dev/null,作用就是让服务无论如何不被启动
            systemctl unmask unit   -   取消强制注销
    
    5、通过systemctl查看系统上所有的服务
        systemctl [command] [--type=TYPE] [-all]
        command:
            list-units  -   依据unit列出目前启动的服务,若加上-all没有启动的服务也会列出
            list-unit-files -   依据/usr/lib/systemd/system/内的文件,将所有文件列表说明.
            --type=TYPE 就是服务类型,主要有service、socket、target等
        例:
            systemctl(不加参数默认是 list-units)   -   列出系统上启动的unit(服务)
            执行结果详解:
                UNIT                                                              LOAD   ACTIVE SUB       DESCRIPTION
                sys-devices-platform-serial8250-tty-ttyS1.device                  loaded active plugged   /sys/devices/platform/serial8250/tty/ttyS1
                sys-devices-platform-serial8250-tty-ttyS2.device                  loaded active plugged   /sys/devices/platform/serial8250/tty/ttyS2
                sys-devices-platform-serial8250-tty-ttyS3.device                  loaded active plugged   /sys/devices/platform/serial8250/tty/ttyS3
                LOAD   = Reflects whether the unit definition was properly loaded.
                ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
                SUB    = The low-level unit activation state, values depend on unit type.

                163 loaded units listed. Pass --all to see loaded but inactive units, too.
                To show all installed unit files use 'systemctl list-unit-files'.
                
                字段含义详解:
                    UNIT    -   项目名称,包括各个unit的类别(看扩展名)
                    LOAd    -   开机时是否会被加载,默认systemctl显示的是有加载的项目
                    ACTIVE  -   目前的状态,与后边的SUB搭配,就是systemctl status 显示的active项目
                    DESRIPTION  -   详细描述
    6、 通过systemctl管理不同的操作环境(target unit)
        
    7、 与systemd的daemon运作过程相关的目录简介
        /usr/lib/systemd/system/
            使用CentOS官方提供的软件安装后,默认的启动脚本装置文件放置在此目录(这里的数据尽量不要修改,要修改时,请到/etc/systemd/system/底下修改)
        /run/systemd/system/
            系统执行过程中所产生的服务脚本,这些脚本的优先顺序高于/usr/lib/systemd/system
        /etc/systemd/system/
            管理员依据主机系统的需求所建立的执行脚本,类似以前的/etc/rc.d/rc5.d/Sxx,执行优先顺序高于/run/systemd/system/
        /etc/sysconfig/*
            几乎所有的服务都会将初始化的一些选项设定写入带这个目录下,例如网络设定写在/etc/sysconfig/network-scripts/这个目录内
        /var/lib/
            一些会产生数据的服务都会将他的数据写入到这个目录中,例如数据库管理系统Mariadb的数据默认写入在/var/lib/mysql/这个目录下
        /run/
            放置一些程序的暂存档(临时文件),例如PID file、lock file等等

        查看进程所用到的socketfile  -   systemctl list-sockets
        /etc/service    -   服务对应的端口信息

十八、认识与分析登录档(系统日志文件)

    1、 常见日志文件记录信息详解
        /var/log/boot.log
            开机的时候系统核心会去侦测与启动硬件,接下来开始各种核心支持的功能启动等。
            这些流程都会记录在此日志文件,每个日志文件只会记录此次开机启动的信息
        /var/log/cron
            记录crond的执行信息,包括/etc/crontab编写是否正确
        /var/log/dmesg
            记录系统在开机的时候核心侦测过程所产生的各项信息,由于CentOS默认将开机时核心
            的硬件侦测过程取消显示,所以额外将数据记录一份在此文件
        /var/log/lastlog
            记录系统上面所有账号最近一次登入系统时的相关信息,lastlog命令就是利用这个文件记录的信息显示
        /var/log/maillog或/var/log/mail/*
            记录邮件的往来信息,其实主要记录postfix(SMTP协议提供者)与dovecot(POP3协议提供者)所
            产生的讯息.SMTP是发信所使用的通讯协议,POP3则是收信使用的通讯协议.
            postfix与dovecot分别是两套达成通讯协议的软件
        /var/log/messages(重要)
            几乎系统发生的任何错误信息(或者重要信息)都会记录在此文件中
        /var/log/secure
            基本上只要牵涉到[需要输入账号密码]的软件,那么当登入时(无论登入正确或错误)都会
            被记录在此文件,包括系统的login程序、图形接口登入所使用的gdm程序、su、sudo等程序
            还有网络联机的ssh、telnet等程序,登入信息都会被记载在此文件
        /var/log/wtmp,/var/log/faillog
            这两个文件可以记录正确登入系统用户的账户信息(wtmp)与错误登入时所使用的账户信息(faillog)
            last 命令就是读取此文件来显示的。
        /var/log/httpd/*,/var/log/samba/*,...
            不同的网络服务会使用它们自己的日志文件来记录它们自己产生的各项信息

    2、 产生与管理日志的相关服务
        1\  软件开发商自定义写入的日志与相关格式
        2\ Linux distribution(Linux 发行版)提供的日志统一管理服务来统一管理
            CentOS提供rsyslog.service 来统一管理日志文件
                systemd-journald.service    -   最主要的信息接受者,由systemd提供
                rsyslog.service             -   主要记录系统与网络等服务的相关信息
                logrotate                   -   主要进行日志文件的轮替功能(防止单一日志文件过大)
    3、 rsyslog.service(系统日志记录服务) 详解
        1\  rsyslog.service 的配置文件  /etc/rsyslog.conf
            主要配置信息:
                什么服务、什么等级的信息、需要被记录在哪里(装置或文件)
            配置文件语法:
                服务名称[.=!]日志信息等级       信息记录的文件名或装置或主机
            例: mail.info                       /var/log/maillog_info
            解: mail服务所产生的大于等于info等级的日志信息,都记录到/var/log/maillog_info文件中

            服务名称:
                Linux核心的syslog所认识的服务类型:
                    (可使用man 3 syslog查询相关信息,或者查询syslog.h文件来了解)
                0   -   kern(kernel)    -   核心(kernel)产生的信息,大部分都是硬件侦测以及核心功能的启用
                1   -   user    -   在用户层级所产生的信息,例如用户使用logger命令来记录日志信息
                2   -   mail    -   邮件收发相关的信息
                3   -   daemon  -   主要是系统的服务所产生的信息,例如systemd就是这个的有关信息
                4   -   auth    -   主要与认证/授权有关的机制,例如login,ssh,su 等需要账号密码的服务
                5   -   syslog  -   由syslog相关协议产生的信息,其实就是rsyslogd 本身产生的信息
                6   -   lpr     -   打印相关的信息
                7   -   news    -   与新闻组服务器相关的信息
                8   -   uucp    -   全名Unix to Unix Copy Protocol,早期用于unix系统间的程序数据交换
                9   -   cron    -   crond/atd 所产生的信息
                10  -   authpriv    -   与auth类似,但记录较多账号私人的信息,包括pam模块的运作等
                11  -   ftp     -   与FTP通讯协议有关的信息输出
                16~23   -   local0~local7   -   保留给本机用户使用的一些日志文件信息,通常是与终端机互动
        
            日志等级:
                Linx核心的syslog将日志等级分为7个主要等级,根据syslog.h的定义:
                7   -   debug   -   用来debug(除错)时产生的信息数据
                6   -   info    -   仅是一些基本的信息说明
                5   -   notice  -   正常信息,但是比info还需要被注意到的一些信息
                4   -   warning -   警示信息,可能有问题,但是不至于影响到某个daemon运作
                3   -   err(error)  -   一些重大的错误信息,例如配置文件的某些设定值造成的该服务无法启动的
                                        信息说明
                2   -   crit    -   比error还要严重的错误信息,这个crit是临界点(critcal)的缩写
                1   -   alert   -   比crit还要严重
                0   -   emerg(panic)    -   疼痛等级,表示系统已经要当机的状态,通常只有硬件出问题
                                            导致整个核心无法顺利运作,才会出现该等级的信息
            [.=!] 链接符号:
                .   -   代表比此等级严重的信息(包括此等级)都要记录下来
                .=  -   代表只记录该等级的信息,其他的不要
                .!  -   代表不等于,意思是除了该等级以外的都要记录下来

            信息记录的文件名或装置或主机:
                指日志文件要放在哪的设定。装置可以是打印机之类的,也可以到不同的主机上
                注意事项:
                    文件的绝对路径  -   通常是放在/var/log路径下
                    打印机或其他    -   例如/dev/lp0这个打印装置
                    使用者名称      -   显示个用户
                    远程主机        -   例如@xjh.vbird.tsai
                    *               -   表示[目前在线所有人],类似wall这个命令的意义

    4、 日志文件的轮替(logrotate)
        1\  logrotate 的配置文件
            /etc/logrotate.conf     -   主要参数文件
            /etc/logrotate.d/       -   在此目录中文件会被读入到/etc/logrotate.conf中来执行

            /etc/logrotate.conf 详解:
            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                weekly      -   预设每周对日志文件进行一次rotate

                rotate 4    -   设置保留几个日志文件  

                create      -   如果日志文件被更名,就重新创建一个
                
                dateext     -   设定被轮替的日志文件加上日期作为文件名后缀

                #compress   -   被轮替的日志文件是否需要被压缩,默认不开启

                include /etc/logrotate.d    -   将/etc/logrotate这个目录中的所有文件都读取进来

                /var/log/wtmp {         -   仅针对 /var/log/wtmp 所设定的参数
                    monthly             -   每个月一次,取代上边设置的每周
                    create 0664 root utmp   -   指定新建日志文件的权限与所属账号群组
                    minsize 1M          -   指定文件容量一定要超过1M后才进行rotate
                    rotate 1            -   仅保留一个日志文件
                }
            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
            /etc/logrotate.d/* 详解:
            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
            /var/log/cron       |
            /var/log/maillog    |
            /var/log/messages   |   ->  要被处理的日志文件名,绝对路径
            /var/log/secure     |
            /var/log/spooler    |
            {               -   参数要使用{}包括起来
                missingok
                sharedscripts   -   执行脚本,可以呼叫外部指令来进行额外的命令下达,结尾需要endscript
                postrotate
                /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
                endscript
            }
                执行脚本可用的环境:
                    prerotate   -   在启动logrotate之前进行的指令,例如修改日志文件的属性
                    postrotate  -   在执行完logrotate之后启动的指令,例如重新启动某个服务(kill -HUP)
            * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

        2\  logrotate   -   手动执行日志文件轮替 
            logrotate [-vf] /etc/logrotate.conf
            选项与参数:
                -v  -   启动显示模式,会在终端显示logrotate 运作过程
                -f  -   无论是否符合配置文件的数据,强制每个日志文件都进行轮替

十九、  Linux 的开机流程分析
    1、 开机流程
        1)  加载BIOS的硬件信息与进行自我测试,并依据设定取得第一个可开机的装置
        2)  读取并执行第一个开机装置内MBR的boot Loader(grub2/spfdisk等程序)
        3)  依据boot loader 的设定加载Kernel, Kernel会开始侦测硬件与加载驱动程序
        4)  在硬件驱动成功后,Kernel会主动呼叫systemd程序,并以default.target流程开机
            -   systemd 执行 sysinit.target 初始化系统及basic.target 准备操作系统
            -   systemd 启动 multi-user.target 下的本机与服务器服务
            -   systemd 执行 multi-user.target 下的 /etc/rc.d/rc.local 文件
            -   systemd 执行 multi-user.target 下的 getty.target 及登入服务
            -   systemd 执行 graphical 需要的服务

        systemctl list-dependencies graphical.target    -   查看系统的服务启用流程

        /usr/lib/systemd/system     -   系统默认的服务启动脚本设定
        /etc/systemd/system         -   管理员自己开发与设定的脚本设定

        CentOS 7.x 的 systemd 开机流程:
            1)  local-fs.target + swap.target   -   这两个target主要在挂载本机/etc/fattab里面所规范的文件系统
                                                    与相关的内存置换空间
            2)  sysinit.target  -   这个target主要在侦测硬件,加载所需要的核心模块等动作
            3)  basic.target    -   加载主要的外围硬件驱动程序与防火墙相关任务
            4)  multi-user.target   -   加载其他一般系统或网络服务
            5)  图形界面相关服务和其他服务的加载如gdm.service
    
    2、 systemd 执行 sysinit.target 初始化系统、basic.target 准备系统
        1\  sysinit.target  (让系统可以存取)
            1)  特殊文件系统装置的挂载,包括 dev-hugepages.mount dev-mqueue.mount 等挂载服务,主要在挂载跟巨量
                内存分页使用与消息队列的功能,挂载成功后,会在/dev 底下建立/dev/hugepage/,/dev/mqueue/等目录
            2)  特殊文件系统的启用:包括磁盘阵列,网络驱动器(iscsi)、LVM文件系统、文件系统对照服务(multipath)
            3)  开机过程的信息传递与动画执行:使用plymouthd 服务搭配 plymouth指令来传递动画与信息
            4)  日志式登录文件的使用:就是 systemd-journald 服务的启用
            5)  加载额外的核心模块:通过/etc/modules-load.d/*.conf 文件的设定,让核心额外加载管理员所需要的
                核心模块
            6)  启动系统的随机数生成器: 随机数生成器可以帮助系统进行一些密码加密演算的功能
            7)  设定终端机(console)字形
            8)  启动动态设备管理器(udevd): 用在动态对应实际装置存取与装置文件名对应的一个服务

        2\  basic.target (此服务执行完以后,系统已经可以顺利运作了)
            1)  加载alsa音效驱动程序:这个alsa是个音效相关的驱动程序
            2)  载入firewalld 防火墙: Centos 7.x 以后使用firewalld取代iptables 的防火墙设定
            3)  加载CPU的微指令功能
            4)  启动与设定SELinux 的安全本文: 由disable的状态改为enable状态,或者是管理员设置强制重新设定
                一次SELinux的安全本文
            5)  将目前的开机过程所产生的开机信息写入到/var/log/dmesg 当中
            6)  由 /etc/sysconfig/modules/*.modules 及 /etc/rc.modules 加载管理员指定的模块
            7)  加载 systemd 支持的 timer 功能

    3、 systemd 启动 multi-user.target 下的服务 (启动各种主机服务和网络服务等) 
        1\  rc-local.service
            当系统开机完成后,若需要系统额外执行一些自定义脚本或程序的方式
                1)  写在 /etc/sysremd/system/ 下, 然后使用 systemctl enable 的方式设置开机自启
                2)  写在 /etc/rc.d/rc.local 下, 然后给 /etc/rc.d/rc.local/ 设置可执行权限(+x)

        2\  提供tty界面与登入的服务 (multi-user.target 下的 getty.target 服务)
            (相关服务: systemd-logind.service, systemd-user-sessions.service)
    4、 systemd 启动 graphical.target 下的服务
        如果default.target 是 multi-user.target 的话,这个步骤就不会被执行
        如果是graphical.target 的话,那么systemd 就会开始加载用户管理服务与图形界面管理员等,启动图形界面登录

    5、 开机过程会用到的主要配置文件
        1\  关于模块
            /etc/modules-load.d/*.conf  -   单纯要核心加载模块的位置
            /etc/modprobe.d/*.conf      -   可以加上模块参数的位置
        2\  环境配置文件
            /etc/sysconfig/*
                authconfig  -   这个文件主要在规范使用者的身份认证的机制,包括是否使用本机的 /etc/passwd,
                                /etc/shadow等,以及/etc/shadow 密码记录使用何种加密算法,还有是否使用外部密码
                                服务器提供的账号验证(NIS, LDAP)等,系统默认使用SHA512加密算法,并且不使用外部的
                                身份验证机制
                                修改方式    -   使用 authconfig-tui 来修改

                cpupower    -   如果系统启动cpupower.service 服务时,系统就会读取这个配置文件,主要是Linux核心
                                如何操作CPU的原则,一般来说,启动cpupower.service 之后,系统会让CPU以最大效能的
                                方式来运作,否则预设就是用多少算多少的模式来处理的

                firewalld\iptables-config\ebtables-config   -   与防火墙服务启动的外带参数有关

                network-scripts -   设定网卡的配置文件
    
    6、 核心与核心模块
        核心和核心模块所存放位置
            核心    -   /boot/vmlinuz 或 /boot/vmlinuz-version
            核心解压缩所需RAM Disk  -   /boot/initramfs(/boot/initramfs-version)
            核心模块    -   /lib/modules/version/kernel 或 /lib/modules/$(uname -r)/kernel
            核心源码    -   /usr/src/linux 或 /usr/src/kernels/(要安装才会有)
        如果核心被顺利加载,记录信息如下
            核心版本        -   /proc/version
            系统核心功能    -   /proc/sys/kernel/
        
        1\  核心模块之间的依赖
            /lib.modules/$(uname -r)/kernel/ 目录下各个目录简介:
                arch    -   与硬件平台有关的项目,例如CPU的等级等等
                crypto  -   核心所支持的加密技术,例如md5或des等等
                drivers -   一些硬件的驱动程序,例如显示器、网卡、PCI等
                fs      -   核心所支持的filesystems,例如vfat\reiserfs\nfs等
                lib     -   一些函式库
                net     -   与网络有关的各项协议数据,还有防火墙模块(net\ipV4\netfilter\*)等
                sound   -   与音效相关的各项模块

            /lib/modules/$(uname -r)/modules.dep    -   记录核心支持的各个模块的各项依赖
            建立此文件使用 depmod 命令
                depmod [-Ane]
                选项与参数:
                    -A  -   不加任何参数时,depmod 会主动的去分析目前核心的模块,并且重新写入
                            /lib/modules/$(uname -r)/modules.dep 中,若加-A 参数时,则depmod会去搜寻比modules.dep
                            内[新]的模块,有更新的才会更新文件
                    -n  -   将结果输出到屏幕,不会写入modules.dep中
                    -e  -   显示出目前已经加载的不可执行的模块名称
                例:
                    cp a.ko /lib/modules/$(uname -r)/kernel/drivers/net && depmod
                    将一个新的网卡驱动程序安装并更新进modules.dep文件

        2\  核心模块的观察
            lsmod   -   查看当前核心加载了多少模块
            执行结果:
                Module                  Size  Used by
                binfmt_misc            17468  1 
                tcp_lp                 12663  0 
            字段含义:
                Module  -   模块名称
                Size    -   模块的大小
                Used by -   此模块是否被其他模块所使用

            modinfo -   查看模块的详细信息
            modinfo [-adln] [module_name|filename]
            选项与参数:
                -a  -   列出作者名称
                -d  -   仅列出该modulues的说明
                -l  -   仅列出授权(license)
                -n  -   仅列出该模块的详细路径
            除了可以查看核心模块之外,还可以检查某个模块文件所代表的意义为何, modinfo 加文件名字

        3\  核心模块的加载与移除    (先解决依赖再加载)
            modprobe    -   模块的加载移除
            modprobe [-cfr] module_name
            选项与参数:
                -c  -   列出目前系统所有的模块(比lsmod更详细的代号对应表)
                -f  -   强制加载该模块
                -r  -   移除某个模块

    7、 Boot Loader - Grub2

    8、 开机过程的问题解决
        1\  修改root 密码(新版的systemd管理机制中,默认的rescue模式无法直接取得root权限)
            1)  选单页面,按下e进入编辑模式
            2)  在linux16 那个核心项目一行末尾添加 rd.break , [crtl] + x 启动
            3)  此时进入RAM Disk 环境,系统的根目录会被挂载到/sysroot 目录下
            4)  mount   -   检查挂载点
            5)  mount -o remount,rw /sysroot    -   修改挂载权限为可读可写
            6)  chroot /sysroot -   切换回实际的根目录所在
            7)  echo "newpasswd" | passwd --stdin root  -   修改root密码
            8)  touch /.autorelabel     -   重要!!  变回SELinux的安全本文
            9)  exit, reboot

                加上/.autorelabel 之后,系统会在开机时重新写入SELinux的type到每个文件,因此会花费比较长时间
                另一种方法:
                    1)  在rd.break 模式下,在修改完 root 密码后,将 /etc/selinux/config 内的SELinux 类型修改为permissive
                    2)  重新启动后,使用root的身份下达[restorecon -Rv/etc] 仅修改 /etc 下的文件
                    3)  重新修改 /etc/selinux/config 改回 enforcing, 然后 [setenforce 1] 即可

        2\  直接开机就以root 执行 bash 的方法
            1)  选单,编辑,在linux16 一行末尾添加 [init=/bin/bash] - 开机完成后会有root权限,但是不能完整的操作系统
            2)  mount -o remount,rw /
            3)  echo "newpasswd" | passwd --stdin root
            4)  无法靠命令来关机....

        3\  进入救援模式(需要root密码)
            1)  选单,编辑,linux16末尾添加 systemd.unit=rescue.target    进入救援模式













